.\" Automatically generated by Pod::Man 2.18 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "POE::Component::IRC::Plugin::Trac::RSS 3pm"
.TH POE::Component::IRC::Plugin::Trac::RSS 3pm "2009-01-24" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
POE::Component::IRC::Plugin::Trac::RSS \- A POE::Component::IRC plugin that provides RSS headline retrieval.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use strict;
\&  use warnings;
\&  use POE qw(Component::IRC Component::IRC::Plugin::Trac::RSS);
\&
\&  my $nickname = \*(AqTracRSS\*(Aq . $$;
\&  my $ircname = \*(AqTracRSS Name\*(Aq;
\&  my $ircserver = \*(Aqirc.nnnnn.net\*(Aq;
\&  my $port = 6667;
\&  my $channel = \*(Aq#channel\*(Aq;
\&  my $rss_url = \*(Aqhttp://\*(Aq;
\&  my $rss_username = \*(Aqusername\*(Aq;
\&  my $rss_password = \*(Aqpassword\*(Aq;
\&
\&  my $irc = POE::Component::IRC\->spawn(
\&        nick => $nickname,
\&        server => $ircserver,
\&        port => $port,
\&        ircname => $ircname,
\&        debug => 0,
\&        plugin_debug => 1,
\&        options => { trace => 0 },
\&  ) or die "Oh noooo! $!";
\&
\&  POE::Session\->create(
\&        package_states => [
\&                \*(Aqmain\*(Aq => [ qw(_start irc_001 irc_join irc_tracrss_items) ],
\&        ],
\&  );
\&
\&  $poe_kernel\->run();
\&  exit 0;
\&
\&  sub _start {
\&    # Create and load our plugin
\&    $irc\->plugin_add( \*(AqTracRSS\*(Aq =>
\&        POE::Component::IRC::Plugin::Trac::RSS\->new() );
\&
\&    $irc\->yield( register => \*(Aqall\*(Aq );
\&    $irc\->yield( connect => { } );
\&    undef;
\&  }
\&
\&  sub irc_001 {
\&    $irc\->yield( join => $channel );
\&    undef;
\&  }
\&
\&  sub irc_join {
\&    my ($kernel,$sender,$channel) = @_[KERNEL,SENDER,ARG1];
\&    print STDERR "$channel $rss_url\en";
\&    $kernel\->yield( \*(Aqget_tracrss\*(Aq, { url => $rss_url, username => $rss_username, password => $rss_password, _channel => $channel } );
\&    undef;
\&  }
\&
\&  sub irc_tracrss_items {
\&    my ($kernel,$sender,$args) = @_[KERNEL,SENDER,ARG0];
\&    my $channel = delete $args\->{_channel};
\&    $kernel\->post( $sender, \*(Aqprivmsg\*(Aq, $channel, join(\*(Aq \*(Aq, @_[ARG1..$#_] ) );
\&    undef;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
POE::Component::IRC::Plugin::Trac::RSS, is a POE::Component::IRC plugin that provides
a mechanism for retrieving Trac/RSS headlines from given URLs.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new" 4
.IX Item "new"
Creates a new plugin object. Takes the following optional arguments:
.Sp
.Vb 4
\&  \*(Aqhttp_alias\*(Aq, you may provide the alias of an existing POE::Component::Client::HTTP 
\&                component that the plugin will use instead of spawning it\*(Aqs own;
\&  \*(Aqfollow_redirects\*(Aq, this argument is passed to PoCoCl::HTTP to inform it how to deal with
\&                following redirects, default is 2;
.Ve
.SH "INPUT EVENTS"
.IX Header "INPUT EVENTS"
The plugin registers the following state handler within your session:
.IP "get_trac_rss" 4
.IX Item "get_trac_rss"
Takes a hashref as an argument with the following keys:
.Sp
.Vb 3
\&  \*(Aqurl\*(Aq, the RSS based url to retrieve items for;
\&  \*(Aqusername\*(Aq, Username to login in trac.
\&  \*(Aqpassword\*(Aq, Password to login in trac.
.Ve
.Sp
You may pass arbitary key/value pairs, but the keys must be prefixed with an underscore.
.SH "OUTPUT"
.IX Header "OUTPUT"
The following irc event is generated with the result of a 'get_headline' command:
.IP "irc_tracrss_items" 4
.IX Item "irc_tracrss_items"
Has the following parameters:
.Sp
.Vb 2
\&  \*(AqARG0\*(Aq, the original hashref that was passed;
\&  \*(AqARG1\*(Aq .. $#_, RSS headline item titles;
.Ve
.IP "irc_tracrss_error" 4
.IX Item "irc_tracrss_error"
Has the following parameters:
.Sp
.Vb 2
\&  \*(AqARG0\*(Aq, the original hashref that was passed;
\&  \*(AqARG1\*(Aq, the error text;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Thiago Berlitz Rondon
.SH "LICENSE"
.IX Header "LICENSE"
Copyright \f(CW\*(C`(c)\*(C'\fR Thiago Berlitz Rondon
.PP
This module may be used, modified, and distributed under the same terms as Perl itself. Please see the license that came with your Perl distribution for details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
POE::Component::IRC
